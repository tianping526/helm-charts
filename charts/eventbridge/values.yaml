# Default values for eventbridge.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This is to override the chart name.
nameOverride: ""
fullnameOverride: "eb"

ebService:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 3

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: linktin/eb-service
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext:
    fsGroup: 2000

  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    additionalHeadless: true
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    ports:
      - name: http
        containerPort: 8000
        protocol: TCP
      - name: grpc
        containerPort: 9000
        protocol: TCP

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  HTTPIngress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  gRPCIngress:
    enabled: false
    className: ""
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not specifying default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 3000m
      memory: 1024Mi
    requests:
      cpu: 1000m
      memory: 512Mi

  # This is to set up the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /v1/eventbridge/dispatcher/schemas?types=NonExistentType
      port: http
  readinessProbe:
    httpGet:
      path: /v1/eventbridge/dispatcher/schemas?types=NonExistentType
      port: http

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 9
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    enabled: true
    minAvailable: 60%
    maxUnavailable:
    unhealthyPodEvictionPolicy: AlwaysAllow

  # topologySpreadConstraints:
  #   - maxSkew: 1
  #     topologyKey: topology.kubernetes.io/zone
  #     whenUnsatisfiable: DoNotSchedule

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  env:
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: eb-pg-ha-postgresql
          key: password
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: eb-redis
          key: redis-password

  # Configurations containing sensitive information
  secret:
    # If you want to use an existing secret, set the name here. secret.yaml will be ignored.
    # The secret must contain the keys defined in secret.yaml.
    existingSecret: ""
    secret.yaml: |
      bootstrap:
        data:
          database:
            source: postgresql://postgres:${POSTGRES_PASSWORD}@eb-pg-ha-pgpool:5432/postgres
          redis:
            password: ${REDIS_PASSWORD}
        auth:
          key: ${EB_SERVICE_AUTH_KEY}

  configmap:
    config.yaml: |
      bootstrap:
        # trace:
        #   endpoint_url: https://localhost:4317/v1/traces
        server:
          http:
            addr: 0.0.0.0:8000
            timeout: 1s
          grpc:
            addr: 0.0.0.0:9000
            timeout: 1s
        data:
          database:
            driver: postgres
            max_open: 100
            max_idle: 10
            conn_max_life_time: 0s
            conn_max_idle_time: 300s
          redis:
            addrs:
              - eb-redis:26379
            master_name: mymaster
            dial_timeout: 1s
            read_timeout: 0.2s
            write_timeout: 0.2s
        # log:
        #   level: INFO # DEBUG, INFO, WARN, ERROR
        #   encoding: JSON # JSON, CONSOLE
        #   sampling:
        #     initial: 100
        #     thereafter: 100
        #   output_paths:
        #     - path: ./log/server.log
        #       rotate:
        #         max_size: 100
        #         max_age: 30
        #         max_backups: 3
        #         compress: false

  nodeSelector: {}

  tolerations: []

  affinity: {}

  serviceMonitor:
    enabled: false
    # additional labels on the ServiceMonitor
    extraLabels: {}
    # add annotations on the ServiceMonitor
    annotations: {}
    metricsEndpoints:
      - port: http
    # Used to set relabeling and metricRelabeling configs on the ServiceMonitor
    # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    relabelings: []
    metricRelabelings: []

ebJob:
  # This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
  replicaCount: 3

  # This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
  image:
    repository: linktin/eb-job
    # This sets the pull policy for images.
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  # This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  imagePullSecrets: []

  # This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  # This is for setting Kubernetes Annotations to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  podAnnotations: {}
  # This is for setting Kubernetes Labels to a Pod.
  # For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  podSecurityContext:
    fsGroup: 2000

  securityContext:
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1000

  # This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
  service:
    # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: ClusterIP
    # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
    ports:
      - name: metric
        containerPort: 8000
        protocol: TCP

  # This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources:
    # We usually recommend not specifying default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    limits:
      cpu: 3000m
      memory: 1Gi
    requests:
      cpu: 1000m
      memory: 512Mi

  # This is to set up the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
  livenessProbe:
    httpGet:
      path: /metrics
      port: metric
  readinessProbe:
    httpGet:
      path: /metrics
      port: metric

  # This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 6
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80

  podDisruptionBudget:
    # https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    enabled: true
    minAvailable: 60%
    maxUnavailable:
    unhealthyPodEvictionPolicy: IfHealthyBudget

  # Additional volumes on the output Deployment definition.
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  env:
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: eb-pg-ha-postgresql
          key: password

  # Configurations containing sensitive information
  secret:
    # If you want to use an existing secret, set the name here. secret.yaml will be ignored.
    # The secret must contain the keys defined in secret.yaml.
    existingSecret: ""
    secret.yaml: |
      bootstrap:
        data:
          database:
            source: postgresql://postgres:${POSTGRES_PASSWORD}@eb-pg-ha-pgpool:5432/postgres

  configmap:
    config.yaml: |
      bootstrap:
        # trace:
        #   endpoint_url: https://localhost:4317/v1/traces
        server:
          http:
            addr: 0.0.0.0:8000
            timeout: 1s
          event:
            source_timeout: 1s # 0 means default timeout 1s
            delay_timeout: 1s # 0 means default timeout 1s
            target_exp_decay_timeout: 1s # 0 means default timeout 1s
            target_backoff_timeout: 1s # 0 means default timeout 1s
            workers_per_mq_topic: 10000
        data:
          database:
            driver: postgres
            max_open: 100
            max_idle: 10
            conn_max_life_time: 0s
            conn_max_idle_time: 300s
        # log:
        #   level: INFO # DEBUG, INFO, WARN, ERROR
        #   encoding: JSON # JSON, CONSOLE
        #   sampling:
        #     initial: 100
        #     thereafter: 100
        #   output_paths:
        #     - path: ./log/server.log
        #       rotate:
        #         max_size: 100
        #         max_age: 30
        #         max_backups: 3
        #         compress: false


  nodeSelector: {}

  tolerations: []

  affinity: {}

  serviceMonitor:
    enabled: false
    # additional labels on the ServiceMonitor
    extraLabels: {}
    # add annotations on the ServiceMonitor
    annotations: {}
    metricsEndpoints:
      - port: metric
    # Used to set relabeling and metricRelabeling configs on the ServiceMonitor
    # https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
    relabelings: []
    metricRelabelings: []

dashboards:
  enable: false

postgresql-ha:
  enabled: true
  fullnameOverride: "eb-pg-ha"
  pgpool:
    replicaCount: 2
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512Mi
  postgresql:
    resources:
      limits:
        cpu: 300m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi

redis:
  enabled: true
  fullnameOverride: "eb-redis"
  sentinel:
    enabled: true
  replica:
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 128Mi

rocketmq:
  enabled: true
  fullnameOverride: "eb-rmq"
